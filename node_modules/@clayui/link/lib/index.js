"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ClayLinkContext", {
  enumerable: true,
  get: function get() {
    return _Context.default;
  }
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _Context = _interopRequireDefault(require("./Context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ClayLink = _react.default.forwardRef(function (_ref, ref) {
  var _classNames;

  var borderless = _ref.borderless,
      children = _ref.children,
      className = _ref.className,
      displayType = _ref.displayType,
      monospaced = _ref.monospaced,
      outline = _ref.outline,
      otherProps = _objectWithoutProperties(_ref, ["borderless", "children", "className", "displayType", "monospaced", "outline"]);

  var TagOrComponent = _react.default.useContext(_Context.default);

  return _react.default.createElement(TagOrComponent, _extends({
    className: (0, _classnames.default)(className, (_classNames = {
      'link-monospaced': monospaced,
      'link-outline': outline,
      'link-outline-borderless': borderless
    }, _defineProperty(_classNames, "link-".concat(displayType), displayType && !outline), _defineProperty(_classNames, "link-outline-".concat(displayType), displayType && outline), _classNames)),
    ref: ref
  }, otherProps), children);
});

var _default = ClayLink;
exports.default = _default;