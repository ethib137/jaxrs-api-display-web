"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _Body = _interopRequireDefault(require("./Body"));

var _Footer = _interopRequireDefault(require("./Footer"));

var _Group = _interopRequireDefault(require("./Group"));

var _Header = _interopRequireDefault(require("./Header"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ClayPanel = function ClayPanel(_ref) {
  var children = _ref.children,
      className = _ref.className,
      collapsable = _ref.collapsable,
      collapseClassNames = _ref.collapseClassNames,
      _ref$defaultExpanded = _ref.defaultExpanded,
      defaultExpanded = _ref$defaultExpanded === void 0 ? false : _ref$defaultExpanded,
      displayTitle = _ref.displayTitle,
      displayType = _ref.displayType,
      _ref$showCollapseIcon = _ref.showCollapseIcon,
      showCollapseIcon = _ref$showCollapseIcon === void 0 ? true : _ref$showCollapseIcon,
      spritemap = _ref.spritemap,
      otherProps = _objectWithoutProperties(_ref, ["children", "className", "collapsable", "collapseClassNames", "defaultExpanded", "displayTitle", "displayType", "showCollapseIcon", "spritemap"]);

  var panelRef = _react.default.useRef(null);

  var _React$useState = _react.default.useState(defaultExpanded),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      expanded = _React$useState2[0],
      setExpaned = _React$useState2[1];

  var _useTransitionHeight = (0, _shared.useTransitionHeight)(expanded, setExpaned, panelRef),
      _useTransitionHeight2 = _slicedToArray(_useTransitionHeight, 3),
      transitioning = _useTransitionHeight2[0],
      handleTransitionEnd = _useTransitionHeight2[1],
      handleClickToggler = _useTransitionHeight2[2];

  var showIconCollapsed = !(!expanded && transitioning || expanded && !transitioning);
  return _react.default.createElement("div", _extends({}, otherProps, {
    className: (0, _classnames.default)('panel', className, _defineProperty({}, "panel-".concat(displayType), displayType)),
    role: "tablist"
  }), !collapsable && _react.default.createElement(_react.default.Fragment, null, displayTitle && _react.default.createElement(_Header.default, null, _react.default.createElement("span", {
    className: "panel-title"
  }, displayTitle)), children), collapsable && _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("button", {
    "aria-expanded": expanded,
    className: (0, _classnames.default)('btn btn-unstyled panel-header panel-header-link', {
      'collapse-icon': showCollapseIcon,
      'collapse-icon-middle': showCollapseIcon,
      collapsed: showIconCollapsed
    }),
    onClick: handleClickToggler,
    role: "tab"
  }, _react.default.createElement("span", {
    className: "panel-title"
  }, displayTitle), showCollapseIcon && _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("span", {
    className: "collapse-icon-closed"
  }, _react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "angle-right"
  })), _react.default.createElement("span", {
    className: "collapse-icon-open"
  }, _react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "angle-down"
  })))), _react.default.createElement("div", {
    className: (0, _classnames.default)('panel-collapse', collapseClassNames, {
      collapse: !transitioning,
      collapsing: transitioning,
      show: expanded
    }),
    onTransitionEnd: handleTransitionEnd,
    ref: panelRef,
    role: "tabpanel"
  }, children)));
};

ClayPanel.Body = _Body.default;
ClayPanel.Group = _Group.default;
ClayPanel.Footer = _Footer.default;
ClayPanel.Header = _Header.default;
var _default = ClayPanel;
exports.default = _default;