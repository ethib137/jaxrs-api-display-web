"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEllipsisItems = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getBufferList = function getBufferList(start, end, config) {
  var EllipsisComponent = config.EllipsisComponent,
      ellipsisProps = config.ellipsisProps,
      items = config.items,
      spritemap = config.spritemap;
  var removedItems = items.slice(start, Math.max(end, start));

  if (removedItems.length > 1) {
    return [_react.default.createElement(EllipsisComponent, _extends({
      items: removedItems,
      key: "ellipsisComponent",
      spritemap: spritemap
    }, ellipsisProps))];
  }

  return removedItems;
};

var getEllipsisItems = function getEllipsisItems(config, ellipsisBuffer) {
  var activeIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var items = config.items;
  var lastIndex = items.length - 1;
  var leftBufferEnd = activeIndex - ellipsisBuffer;
  var rightBufferStart = activeIndex + ellipsisBuffer + 1;
  var leftBuffer = getBufferList(1, leftBufferEnd, config);
  var rightBuffer = getBufferList(rightBufferStart, lastIndex, config);
  var newArray = [items[0]].concat(_toConsumableArray(leftBuffer), _toConsumableArray(items.slice(Math.max(activeIndex - ellipsisBuffer, 1), // Add 1 to account for active index
  Math.min(activeIndex + ellipsisBuffer + 1, lastIndex))), _toConsumableArray(rightBuffer));

  if (items.length > 1) {
    newArray.push(items[lastIndex]);
  }

  return newArray;
};

exports.getEllipsisItems = getEllipsisItems;