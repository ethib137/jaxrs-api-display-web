"use strict";
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = __importDefault(require("child_process"));
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const ejs_1 = __importDefault(require("ejs"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
const path_1 = __importDefault(require("path"));
/**
 * Template renderer class
 */
class Renderer {
    /**
     *
     * @param {string} templatesPath
     * @param {string} outputPath
     */
    constructor(templatesPath, outputPath) {
        this._templatesPath = templatesPath;
        this._outputPath = outputPath;
    }
    /**
     *
     * @param {string} templatePath the template path
     * @param {Object} data the contextual data to render the template
     * @param {string} dir optional relative directory in output path
     * @param {string} name optional output file name
     */
    render(templatePath, data = {}, { dir = '', name } = {}) {
        dir = path_1.default.join(this._outputPath, dir);
        name = name || templatePath;
        const outputPath = path_1.default.join(dir, name);
        fs_extra_1.default.ensureDirSync(path_1.default.dirname(outputPath));
        ejs_1.default.renderFile(path_1.default.join(this._templatesPath, `${templatePath}.ejs`), data, {
            escape: text => text,
        }, (err, str) => {
            fs_extra_1.default.writeFileSync(outputPath, str);
        });
    }
}
exports.Renderer = Renderer;
/**
 *
 * @param {string} script
 * @param {Array<*>} args
 */
function runNodeModulesBin(script, args = []) {
    const proc = cross_spawn_1.default.sync(project_1.default.dir.join('node_modules', '.bin', script).asNative, args, {
        stdio: 'inherit',
    });
    if (proc.error) {
        throw proc.error;
    }
    else if (proc.status != 0) {
        throw new Error(`Node modules binary '${script}' finished with status ${proc.status}`);
    }
    else if (proc.signal) {
        throw new Error(`Node modules binary '${script}' finished due to signal ${proc.signal}`);
    }
}
exports.runNodeModulesBin = runNodeModulesBin;
/**
 *
 * @param {string} script
 * @param {Array<*>} args
 */
function runPkgJsonScript(script, args = []) {
    const pkgManager = project_1.default.pkgManager || 'npm';
    if (pkgManager !== 'yarn') {
        args = ['--'].concat(args);
    }
    const proc = child_process_1.default.spawnSync(pkgManager, ['run', script, ...args], {
        shell: true,
        stdio: 'inherit',
    });
    if (proc.error) {
        throw proc.error;
    }
    else if (proc.status != 0) {
        throw new Error(`Package script '${script}' finished with status ${proc.status}`);
    }
    else if (proc.signal) {
        throw new Error(`Package script '${script}' finished due to signal ${proc.signal}`);
    }
}
exports.runPkgJsonScript = runPkgJsonScript;
