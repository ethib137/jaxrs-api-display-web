"use strict";
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = __importDefault(require("child_process"));
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const cfg = __importStar(require("../config"));
const util_2 = require("../util");
const templatesDir = path_1.default.join(__dirname, '..', 'resources', 'start');
const webpackDir = project_1.default.dir.join('.webpack');
const pkgJson = project_1.default.pkgJson;
/**
 *
 */
function default_1() {
    copyWebpackResources();
    runWebpackDevServer();
}
exports.default = default_1;
/**
 *
 */
function copyWebpackResources() {
    const renderer = new util_2.Renderer(templatesDir, webpackDir.asNative);
    renderer.render('index.html', {
        pkgName: pkgJson.name,
        pkgVersion: pkgJson.version,
        cssPath: getCssPath(pkgJson),
    });
    renderer.render('index.js', {
        mainModule: `../src/${cfg.getWebpackMainModule()}`,
    });
    renderer.render('webpack.config.js', {
        pkgName: pkgJson.name,
        port: cfg.getWebpackPort(),
        rules: util_1.default.inspect(cfg.getWebpackRules().map(rule => {
            rule.test = new RegExp(rule.test);
            return rule;
        })),
        extensions: util_1.default.inspect(cfg.getWebpackExtensions()),
    });
}
/**
 * Get the portlet's CSS path from package.json
 * @return {string}
 */
function getCssPath() {
    if (!pkgJson['portlet'] ||
        !pkgJson['portlet']['com.liferay.portlet.header-portlet-css']) {
        return undefined;
    }
    let path = pkgJson['portlet']['com.liferay.portlet.header-portlet-css'];
    if (path.charAt(0) !== '/') {
        path = `/${path}`;
    }
    return path;
}
/**
 *
 */
function runWebpackDevServer() {
    let proc;
    if (os_1.default.platform() === 'win32') {
        const webpackDevServerPath = path_1.default.resolve(project_1.default.dir.join('node_modules', '.bin', 'webpack-dev-server.cmd')
            .asNative);
        proc = child_process_1.default.spawn(webpackDevServerPath, [], {
            cwd: webpackDir.asNative,
            shell: true,
        });
    }
    else {
        const webpackDevServerPath = path_1.default.resolve(project_1.default.dir.join('node_modules', '.bin', 'webpack-dev-server')
            .asNative);
        proc = child_process_1.default.spawn(process.execPath, [webpackDevServerPath], {
            cwd: webpackDir.asNative,
        });
    }
    proc.stdout.on('data', data => {
        console.log(data.toString());
    });
    proc.stderr.on('data', data => {
        console.error(data.toString());
    });
}
