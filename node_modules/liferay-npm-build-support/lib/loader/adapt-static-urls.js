"use strict";
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const escape_string_regexp_1 = __importDefault(require("escape-string-regexp"));
const globby_1 = __importDefault(require("globby"));
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
const file_path_1 = __importDefault(require("liferay-npm-build-tools-common/lib/file-path"));
const util_1 = require("./util");
/**
 * A loader to rewrite static asset URLs inside a file (usually a webpack
 * generated bundle).
 *
 * This loader prepends the configured web context path to the static asset URLs
 * so that they can be retrieved from a Liferay server.
 *
 * The web context path is taken from property
 * [create-jar.features.web-context](https://github.com/liferay/liferay-js-toolkit/wiki/.npmbundlerrc-file-reference#create-jarfeaturesweb-context).
 * inside `.npmbundlerrc`.
 *
 * @deprecated use `adapt-static-urls-at-runtime.ts` instead
 */
function default_1(context, options) {
    const { content, log } = context;
    const { docroot, include, prefix = '', prependSlash = false } = util_1.replaceTokens(options);
    const docrootDir = project_1.default.dir.join(new file_path_1.default(docroot, { posix: true }));
    const filePosixPaths = globby_1.default
        .sync(`${docrootDir.asPosix}/**`, {
        absolute: true,
        onlyFiles: true,
        followSymbolicLinks: false,
    })
        .map(filePath => docrootDir.relative(filePath).asPosix);
    const patterns = Array.isArray(include)
        ? include.map(item => new RegExp(item))
        : [new RegExp(include)];
    let modifiedContent = content;
    filePosixPaths.forEach(filePosixPath => {
        if (!patterns.some(pattern => pattern.test(filePosixPath))) {
            return;
        }
        const regexp = new RegExp(escape_string_regexp_1.default(filePosixPath), 'g');
        const matches = regexp.exec(content);
        if (!matches) {
            return;
        }
        log.info('adapt-static-urls', `Adapted ${matches.length} occurrences of URL '${filePosixPath}'`);
        modifiedContent = modifiedContent.replace(regexp, (prependSlash ? '/' : '') +
            `o${project_1.default.jar.webContextPath}/${prefix}${filePosixPath}`);
    });
    return modifiedContent;
}
exports.default = default_1;
