"use strict";
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
// TODO: get rid of this function once we support loading config from .js files
/**
 * Replace `${project.name}` and `${project.version}` tokens inside strings of
 * loader options objects.
 */
function replaceTokens(options, { except } = { except: [] }) {
    const { pkgJson } = project_1.default;
    Object.keys(options).forEach(key => {
        if (typeof options[key] === 'string') {
            if (except.includes(key)) {
                return;
            }
            options[key] = options[key]
                .replace(/\$\{project\.name\}/g, pkgJson['name'])
                .replace(/\$\{project\.version\}/g, pkgJson['version']);
        }
    });
    return options;
}
exports.replaceTokens = replaceTokens;
/**
 * Remove a webpack hash (a hex number surrounded by dots near the end of the
 * file name) if present from a file path.
 */
function removeWebpackHash(filePath) {
    const filePathParts = filePath.split('.');
    let hashIndex;
    for (hashIndex = filePathParts.length - 1; hashIndex >= 0; hashIndex--) {
        const filePathPart = filePathParts[hashIndex];
        if (filePathPart.match(/^[0-9a-fA-F]+$/)) {
            break;
        }
    }
    if (hashIndex == -1) {
        return filePath;
    }
    filePathParts.splice(hashIndex, 1);
    return filePathParts.join('.');
}
exports.removeWebpackHash = removeWebpackHash;
