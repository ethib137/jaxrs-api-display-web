"use strict";
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const babelUtil = __importStar(require("liferay-npm-build-tools-common/lib/babel-util"));
const file_path_1 = __importDefault(require("liferay-npm-build-tools-common/lib/file-path"));
const read_json_sync_1 = __importDefault(require("read-json-sync"));
const util_1 = require("./util");
/**
 * A loader that wraps JavaScript files into a `Liferay.Loader.define()` call.
 *
 * @remarks
 * The loader leaves the JavaScript content untouched, just wrapping it in a
 * define call.
 *
 * The name of the module is inferred from the project relative file path
 * optionally removing the configured `removePrefix`.
 *
 * If `honorWebpackHash` is set to `true` and the file name contains a webpack
 * hash, it is used to compute the module name. The default value of
 * `honorWebpackHash` is false.
 */
function default_1(context, options) {
    const { content, filePath, log } = context;
    const { removePrefix = '', honorWebpackHash = false } = options;
    const moduleName = getModuleName(honorWebpackHash ? filePath : util_1.removeWebpackHash(filePath), removePrefix);
    log.info('wrap-webpack-bundle', `Wrapped bundle with module name '${moduleName}'`);
    return `
Liferay.Loader.define(
	'${moduleName}',
	['module'],
	function(module) {
		module.exports = function(_LIFERAY_PARAMS_, _ADAPT_RT_) {
			${content}
		}
	}
);`;
}
exports.default = default_1;
/**
 * Compute the module name associated to a project relative file path removing
 * the `removePrefix` before.
 */
function getModuleName(prjRelfilePath, removePrefix) {
    const absFile = new file_path_1.default(prjRelfilePath);
    const pkgDir = new file_path_1.default(babelUtil.getPackageDir(prjRelfilePath));
    let moduleName = pkgDir.relative(absFile).asPosix;
    if (moduleName.toLowerCase().endsWith('.js')) {
        moduleName = moduleName.substring(0, moduleName.length - 3);
    }
    if (moduleName.startsWith(removePrefix)) {
        moduleName = moduleName.substring(removePrefix.length);
    }
    const pkgJson = read_json_sync_1.default(pkgDir.join('package.json').asNative);
    return `${pkgJson.name}@${pkgJson.version}/${moduleName}`;
}
