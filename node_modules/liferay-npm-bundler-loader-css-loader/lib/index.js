"use strict";
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const file_path_1 = __importDefault(require("liferay-npm-build-tools-common/lib/file-path"));
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
const path_1 = __importDefault(require("path"));
/**
 * @param {object} context loader's context
 */
function default_1(context, { extension, pathModule = '/o' }) {
    const { filePath, log } = context;
    const href = getHref(filePath, extension, pathModule);
    // Note that Liferay.ThemeDisplay.getPathContext() when called at runtime
    // returns both pathProxy and the context path of the portal's webapp.
    context.extraArtifacts[`${filePath}.js.wrap-modules-amd.template`] = `
var link = document.createElement("link");
link.setAttribute("rel", "stylesheet");
link.setAttribute("type", "text/css");
link.setAttribute("href", Liferay.ThemeDisplay.getPathContext() + "${href}");

function defineModule() {
	__WRAPPED_MODULE__	
}

link.onload = defineModule;

link.onerror = function() {
	console.warn('Unable to load ${href}. However, its .js module will still be defined to avoid breaking execution flow (expect some visual degradation).');

	defineModule();
}

document.querySelector("head").appendChild(link);
`;
    context.extraArtifacts[`${filePath}.js`] = `
module.exports = link;
`;
    log.info('css-loader', `Generated .js module to inject '${href}'`);
}
exports.default = default_1;
function getHref(filePath, extension, pathModule) {
    let webContextPath;
    if (project_1.default.jar.supported) {
        webContextPath = project_1.default.jar.webContextPath;
    }
    else {
        const bnd = fs_1.default
            .readFileSync(project_1.default.dir.join('bnd.bnd').asNative)
            .toString();
        const lines = bnd.split('\n');
        const webContextPathLine = lines.find(line => line.startsWith('Web-ContextPath:'));
        webContextPath = webContextPathLine.substring(16).trim();
    }
    project_1.default.sources
        .map(source => source.asNative)
        .forEach(sourcePath => {
        // Remove `./` from sourcePath so that it matches the filePath correctly
        sourcePath = sourcePath.substring(2);
        if (filePath.startsWith(sourcePath)) {
            filePath = filePath.substring(sourcePath.length + 1);
        }
    });
    if (extension !== undefined) {
        const extname = path_1.default.extname(filePath);
        if (extname == '') {
            filePath = `${filePath}.${extension}`;
        }
        else {
            filePath = filePath.replace(new RegExp(`\\${extname}$`), `${extension}`);
        }
    }
    filePath = new file_path_1.default(filePath).asPosix;
    return `${pathModule}${webContextPath}/${filePath}`;
}
