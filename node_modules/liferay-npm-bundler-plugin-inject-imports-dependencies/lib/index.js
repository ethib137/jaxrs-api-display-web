"use strict";
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const imports_1 = require("liferay-npm-build-tools-common/lib/imports");
const ns = __importStar(require("liferay-npm-build-tools-common/lib/namespace"));
/**
 * @return {void}
 */
function default_1({ config, globalConfig, log, rootPkgJson }, { pkgJson }) {
    let imports = config.imports || globalConfig.imports || {};
    imports = imports_1.normalizeImportsConfig(imports);
    pkgJson.dependencies = pkgJson.dependencies || {};
    Object.keys(imports).forEach(namespace => {
        Object.keys(imports[namespace]).forEach(pkgName => {
            const localName = ns.addNamespace(pkgName, rootPkgJson);
            const importVersion = imports[namespace][pkgName];
            const importName = namespace === ''
                ? pkgName
                : ns.addNamespace(pkgName, { name: namespace });
            pkgJson.dependencies[importName] = importVersion;
            if (pkgJson.dependencies[localName] !== undefined &&
                pkgJson.dependencies[localName] !== importVersion) {
                log.info('inject-imports-dependencies', 'Injected dependency', `${importName}@${importVersion}`, '(however, note that the same dependency in package.json', 'has different constraints:', `${localName}@${pkgJson.dependencies[localName]})`);
            }
            else {
                log.info('inject-imports-dependencies', 'Injected dependency', `${importName}@${importVersion}`);
            }
        });
    });
}
exports.default = default_1;
